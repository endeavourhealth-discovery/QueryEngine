/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables.records;


import java.math.BigDecimal;
import java.sql.Date;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.tables.Encounter;
import org.jooq.Field;
import org.jooq.Record18;
import org.jooq.Record3;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EncounterRecord extends UpdatableRecordImpl<EncounterRecord> implements Record18<Long, Long, Long, Long, Long, Long, Date, Integer, Long, Long, Integer, Integer, BigDecimal, String, String, String, Date, String> {

    private static final long serialVersionUID = 1363187000;

    /**
     * Setter for <code>subscriber_pi.encounter.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.organization_id</code>.
     */
    public void setOrganizationId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.organization_id</code>.
     */
    public Long getOrganizationId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.patient_id</code>.
     */
    public void setPatientId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.patient_id</code>.
     */
    public Long getPatientId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.person_id</code>.
     */
    public void setPersonId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.person_id</code>.
     */
    public Long getPersonId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.practitioner_id</code>.
     */
    public void setPractitionerId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.practitioner_id</code>.
     */
    public Long getPractitionerId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.appointment_id</code>.
     */
    public void setAppointmentId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.appointment_id</code>.
     */
    public Long getAppointmentId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.clinical_effective_date</code>.
     */
    public void setClinicalEffectiveDate(Date value) {
        set(6, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.clinical_effective_date</code>.
     */
    public Date getClinicalEffectiveDate() {
        return (Date) get(6);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.date_precision_concept_id</code>.
     */
    public void setDatePrecisionConceptId(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.date_precision_concept_id</code>.
     */
    public Integer getDatePrecisionConceptId() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.episode_of_care_id</code>.
     */
    public void setEpisodeOfCareId(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.episode_of_care_id</code>.
     */
    public Long getEpisodeOfCareId() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.service_provider_organization_id</code>.
     */
    public void setServiceProviderOrganizationId(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.service_provider_organization_id</code>.
     */
    public Long getServiceProviderOrganizationId() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.core_concept_id</code>.
     */
    public void setCoreConceptId(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.core_concept_id</code>.
     */
    public Integer getCoreConceptId() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.non_core_concept_id</code>.
     */
    public void setNonCoreConceptId(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.non_core_concept_id</code>.
     */
    public Integer getNonCoreConceptId() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.age_at_event</code>.
     */
    public void setAgeAtEvent(BigDecimal value) {
        set(12, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.age_at_event</code>.
     */
    public BigDecimal getAgeAtEvent() {
        return (BigDecimal) get(12);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.type</code>.
     */
    public void setType(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.type</code>.
     */
    public String getType() {
        return (String) get(13);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.sub_type</code>.
     */
    public void setSubType(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.sub_type</code>.
     */
    public String getSubType() {
        return (String) get(14);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.admission_method</code>.
     */
    public void setAdmissionMethod(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.admission_method</code>.
     */
    public String getAdmissionMethod() {
        return (String) get(15);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.end_date</code>.
     */
    public void setEndDate(Date value) {
        set(16, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.end_date</code>.
     */
    public Date getEndDate() {
        return (Date) get(16);
    }

    /**
     * Setter for <code>subscriber_pi.encounter.institution_location_id</code>.
     */
    public void setInstitutionLocationId(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>subscriber_pi.encounter.institution_location_id</code>.
     */
    public String getInstitutionLocationId() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<Long, Long, Long> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, Long, Long, Long, Long, Long, Date, Integer, Long, Long, Integer, Integer, BigDecimal, String, String, String, Date, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<Long, Long, Long, Long, Long, Long, Date, Integer, Long, Long, Integer, Integer, BigDecimal, String, String, String, Date, String> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Encounter.ENCOUNTER.ID;
    }

    @Override
    public Field<Long> field2() {
        return Encounter.ENCOUNTER.ORGANIZATION_ID;
    }

    @Override
    public Field<Long> field3() {
        return Encounter.ENCOUNTER.PATIENT_ID;
    }

    @Override
    public Field<Long> field4() {
        return Encounter.ENCOUNTER.PERSON_ID;
    }

    @Override
    public Field<Long> field5() {
        return Encounter.ENCOUNTER.PRACTITIONER_ID;
    }

    @Override
    public Field<Long> field6() {
        return Encounter.ENCOUNTER.APPOINTMENT_ID;
    }

    @Override
    public Field<Date> field7() {
        return Encounter.ENCOUNTER.CLINICAL_EFFECTIVE_DATE;
    }

    @Override
    public Field<Integer> field8() {
        return Encounter.ENCOUNTER.DATE_PRECISION_CONCEPT_ID;
    }

    @Override
    public Field<Long> field9() {
        return Encounter.ENCOUNTER.EPISODE_OF_CARE_ID;
    }

    @Override
    public Field<Long> field10() {
        return Encounter.ENCOUNTER.SERVICE_PROVIDER_ORGANIZATION_ID;
    }

    @Override
    public Field<Integer> field11() {
        return Encounter.ENCOUNTER.CORE_CONCEPT_ID;
    }

    @Override
    public Field<Integer> field12() {
        return Encounter.ENCOUNTER.NON_CORE_CONCEPT_ID;
    }

    @Override
    public Field<BigDecimal> field13() {
        return Encounter.ENCOUNTER.AGE_AT_EVENT;
    }

    @Override
    public Field<String> field14() {
        return Encounter.ENCOUNTER.TYPE;
    }

    @Override
    public Field<String> field15() {
        return Encounter.ENCOUNTER.SUB_TYPE;
    }

    @Override
    public Field<String> field16() {
        return Encounter.ENCOUNTER.ADMISSION_METHOD;
    }

    @Override
    public Field<Date> field17() {
        return Encounter.ENCOUNTER.END_DATE;
    }

    @Override
    public Field<String> field18() {
        return Encounter.ENCOUNTER.INSTITUTION_LOCATION_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getOrganizationId();
    }

    @Override
    public Long component3() {
        return getPatientId();
    }

    @Override
    public Long component4() {
        return getPersonId();
    }

    @Override
    public Long component5() {
        return getPractitionerId();
    }

    @Override
    public Long component6() {
        return getAppointmentId();
    }

    @Override
    public Date component7() {
        return getClinicalEffectiveDate();
    }

    @Override
    public Integer component8() {
        return getDatePrecisionConceptId();
    }

    @Override
    public Long component9() {
        return getEpisodeOfCareId();
    }

    @Override
    public Long component10() {
        return getServiceProviderOrganizationId();
    }

    @Override
    public Integer component11() {
        return getCoreConceptId();
    }

    @Override
    public Integer component12() {
        return getNonCoreConceptId();
    }

    @Override
    public BigDecimal component13() {
        return getAgeAtEvent();
    }

    @Override
    public String component14() {
        return getType();
    }

    @Override
    public String component15() {
        return getSubType();
    }

    @Override
    public String component16() {
        return getAdmissionMethod();
    }

    @Override
    public Date component17() {
        return getEndDate();
    }

    @Override
    public String component18() {
        return getInstitutionLocationId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getOrganizationId();
    }

    @Override
    public Long value3() {
        return getPatientId();
    }

    @Override
    public Long value4() {
        return getPersonId();
    }

    @Override
    public Long value5() {
        return getPractitionerId();
    }

    @Override
    public Long value6() {
        return getAppointmentId();
    }

    @Override
    public Date value7() {
        return getClinicalEffectiveDate();
    }

    @Override
    public Integer value8() {
        return getDatePrecisionConceptId();
    }

    @Override
    public Long value9() {
        return getEpisodeOfCareId();
    }

    @Override
    public Long value10() {
        return getServiceProviderOrganizationId();
    }

    @Override
    public Integer value11() {
        return getCoreConceptId();
    }

    @Override
    public Integer value12() {
        return getNonCoreConceptId();
    }

    @Override
    public BigDecimal value13() {
        return getAgeAtEvent();
    }

    @Override
    public String value14() {
        return getType();
    }

    @Override
    public String value15() {
        return getSubType();
    }

    @Override
    public String value16() {
        return getAdmissionMethod();
    }

    @Override
    public Date value17() {
        return getEndDate();
    }

    @Override
    public String value18() {
        return getInstitutionLocationId();
    }

    @Override
    public EncounterRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public EncounterRecord value2(Long value) {
        setOrganizationId(value);
        return this;
    }

    @Override
    public EncounterRecord value3(Long value) {
        setPatientId(value);
        return this;
    }

    @Override
    public EncounterRecord value4(Long value) {
        setPersonId(value);
        return this;
    }

    @Override
    public EncounterRecord value5(Long value) {
        setPractitionerId(value);
        return this;
    }

    @Override
    public EncounterRecord value6(Long value) {
        setAppointmentId(value);
        return this;
    }

    @Override
    public EncounterRecord value7(Date value) {
        setClinicalEffectiveDate(value);
        return this;
    }

    @Override
    public EncounterRecord value8(Integer value) {
        setDatePrecisionConceptId(value);
        return this;
    }

    @Override
    public EncounterRecord value9(Long value) {
        setEpisodeOfCareId(value);
        return this;
    }

    @Override
    public EncounterRecord value10(Long value) {
        setServiceProviderOrganizationId(value);
        return this;
    }

    @Override
    public EncounterRecord value11(Integer value) {
        setCoreConceptId(value);
        return this;
    }

    @Override
    public EncounterRecord value12(Integer value) {
        setNonCoreConceptId(value);
        return this;
    }

    @Override
    public EncounterRecord value13(BigDecimal value) {
        setAgeAtEvent(value);
        return this;
    }

    @Override
    public EncounterRecord value14(String value) {
        setType(value);
        return this;
    }

    @Override
    public EncounterRecord value15(String value) {
        setSubType(value);
        return this;
    }

    @Override
    public EncounterRecord value16(String value) {
        setAdmissionMethod(value);
        return this;
    }

    @Override
    public EncounterRecord value17(Date value) {
        setEndDate(value);
        return this;
    }

    @Override
    public EncounterRecord value18(String value) {
        setInstitutionLocationId(value);
        return this;
    }

    @Override
    public EncounterRecord values(Long value1, Long value2, Long value3, Long value4, Long value5, Long value6, Date value7, Integer value8, Long value9, Long value10, Integer value11, Integer value12, BigDecimal value13, String value14, String value15, String value16, Date value17, String value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EncounterRecord
     */
    public EncounterRecord() {
        super(Encounter.ENCOUNTER);
    }

    /**
     * Create a detached, initialised EncounterRecord
     */
    public EncounterRecord(Long id, Long organizationId, Long patientId, Long personId, Long practitionerId, Long appointmentId, Date clinicalEffectiveDate, Integer datePrecisionConceptId, Long episodeOfCareId, Long serviceProviderOrganizationId, Integer coreConceptId, Integer nonCoreConceptId, BigDecimal ageAtEvent, String type, String subType, String admissionMethod, Date endDate, String institutionLocationId) {
        super(Encounter.ENCOUNTER);

        set(0, id);
        set(1, organizationId);
        set(2, patientId);
        set(3, personId);
        set(4, practitionerId);
        set(5, appointmentId);
        set(6, clinicalEffectiveDate);
        set(7, datePrecisionConceptId);
        set(8, episodeOfCareId);
        set(9, serviceProviderOrganizationId);
        set(10, coreConceptId);
        set(11, nonCoreConceptId);
        set(12, ageAtEvent);
        set(13, type);
        set(14, subType);
        set(15, admissionMethod);
        set(16, endDate);
        set(17, institutionLocationId);
    }
}
