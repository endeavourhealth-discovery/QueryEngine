/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.EncounterRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Encounter extends TableImpl<EncounterRecord> {

    private static final long serialVersionUID = 1728512879;

    /**
     * The reference instance of <code>subscriber_pi.encounter</code>
     */
    public static final Encounter ENCOUNTER = new Encounter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EncounterRecord> getRecordType() {
        return EncounterRecord.class;
    }

    /**
     * The column <code>subscriber_pi.encounter.id</code>.
     */
    public final TableField<EncounterRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.encounter.organization_id</code>.
     */
    public final TableField<EncounterRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.encounter.patient_id</code>.
     */
    public final TableField<EncounterRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.encounter.person_id</code>.
     */
    public final TableField<EncounterRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.encounter.practitioner_id</code>.
     */
    public final TableField<EncounterRecord, Long> PRACTITIONER_ID = createField(DSL.name("practitioner_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.encounter.appointment_id</code>.
     */
    public final TableField<EncounterRecord, Long> APPOINTMENT_ID = createField(DSL.name("appointment_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.encounter.clinical_effective_date</code>.
     */
    public final TableField<EncounterRecord, Date> CLINICAL_EFFECTIVE_DATE = createField(DSL.name("clinical_effective_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.encounter.date_precision_concept_id</code>.
     */
    public final TableField<EncounterRecord, Integer> DATE_PRECISION_CONCEPT_ID = createField(DSL.name("date_precision_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.encounter.episode_of_care_id</code>.
     */
    public final TableField<EncounterRecord, Long> EPISODE_OF_CARE_ID = createField(DSL.name("episode_of_care_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.encounter.service_provider_organization_id</code>.
     */
    public final TableField<EncounterRecord, Long> SERVICE_PROVIDER_ORGANIZATION_ID = createField(DSL.name("service_provider_organization_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.encounter.core_concept_id</code>.
     */
    public final TableField<EncounterRecord, Integer> CORE_CONCEPT_ID = createField(DSL.name("core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.encounter.non_core_concept_id</code>.
     */
    public final TableField<EncounterRecord, Integer> NON_CORE_CONCEPT_ID = createField(DSL.name("non_core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.encounter.age_at_event</code>.
     */
    public final TableField<EncounterRecord, BigDecimal> AGE_AT_EVENT = createField(DSL.name("age_at_event"), org.jooq.impl.SQLDataType.DECIMAL(5, 2), this, "");

    /**
     * The column <code>subscriber_pi.encounter.type</code>.
     */
    public final TableField<EncounterRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>subscriber_pi.encounter.sub_type</code>.
     */
    public final TableField<EncounterRecord, String> SUB_TYPE = createField(DSL.name("sub_type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>subscriber_pi.encounter.admission_method</code>.
     */
    public final TableField<EncounterRecord, String> ADMISSION_METHOD = createField(DSL.name("admission_method"), org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>subscriber_pi.encounter.end_date</code>.
     */
    public final TableField<EncounterRecord, Date> END_DATE = createField(DSL.name("end_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.encounter.institution_location_id</code>.
     */
    public final TableField<EncounterRecord, String> INSTITUTION_LOCATION_ID = createField(DSL.name("institution_location_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>subscriber_pi.encounter</code> table reference
     */
    public Encounter() {
        this(DSL.name("encounter"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.encounter</code> table reference
     */
    public Encounter(String alias) {
        this(DSL.name(alias), ENCOUNTER);
    }

    /**
     * Create an aliased <code>subscriber_pi.encounter</code> table reference
     */
    public Encounter(Name alias) {
        this(alias, ENCOUNTER);
    }

    private Encounter(Name alias, Table<EncounterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Encounter(Name alias, Table<EncounterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Encounter(Table<O> child, ForeignKey<O, EncounterRecord> key) {
        super(child, key, ENCOUNTER);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENCOUNTER_ENCOUNTER_CORE_CONCEPT_ID_CLINICAL_EFFECTIVE_DATE, Indexes.ENCOUNTER_ENCOUNTER_ID, Indexes.ENCOUNTER_ENCOUNTER_PATIENT_ID, Indexes.ENCOUNTER_FKI_ENCOUNTER_APPOINTMENT_ID, Indexes.ENCOUNTER_FKI_ENCOUNTER_PATIENT_ID_ORGANIZATION_ID, Indexes.ENCOUNTER_FK_ENCOUNTER_EPISODE_OF_CARE_ID, Indexes.ENCOUNTER_FK_ENCOUNTER_PRACTITIONER_ID, Indexes.ENCOUNTER_FK_ENCOUNTER_SERVICE_PROVIDER_ORGANIZATION_ID, Indexes.ENCOUNTER_PRIMARY);
    }

    @Override
    public UniqueKey<EncounterRecord> getPrimaryKey() {
        return Keys.KEY_ENCOUNTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<EncounterRecord>> getKeys() {
        return Arrays.<UniqueKey<EncounterRecord>>asList(Keys.KEY_ENCOUNTER_PRIMARY, Keys.KEY_ENCOUNTER_ENCOUNTER_ID);
    }

    @Override
    public List<ForeignKey<EncounterRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EncounterRecord, ?>>asList(Keys.FK_ENCOUNTER_PATIENT_ID_ORGANIZATION_ID, Keys.FK_ENCOUNTER_PRACTITIONER_ID, Keys.FK_ENCOUNTER_APPOINTMENT_ID, Keys.FK_ENCOUNTER_EPISODE_OF_CARE_ID, Keys.FK_ENCOUNTER_SERVICE_PROVIDER_ORGANIZATION_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_ENCOUNTER_PATIENT_ID_ORGANIZATION_ID);
    }

    public Practitioner practitioner() {
        return new Practitioner(this, Keys.FK_ENCOUNTER_PRACTITIONER_ID);
    }

    public Appointment appointment() {
        return new Appointment(this, Keys.FK_ENCOUNTER_APPOINTMENT_ID);
    }

    public EpisodeOfCare episodeOfCare() {
        return new EpisodeOfCare(this, Keys.FK_ENCOUNTER_EPISODE_OF_CARE_ID);
    }

    public Organization organization() {
        return new Organization(this, Keys.FK_ENCOUNTER_SERVICE_PROVIDER_ORGANIZATION_ID);
    }

    @Override
    public Encounter as(String alias) {
        return new Encounter(DSL.name(alias), this);
    }

    @Override
    public Encounter as(Name alias) {
        return new Encounter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Encounter rename(String name) {
        return new Encounter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Encounter rename(Name name) {
        return new Encounter(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Long, Long, Long, Long, Long, Long, Date, Integer, Long, Long, Integer, Integer, BigDecimal, String, String, String, Date, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
