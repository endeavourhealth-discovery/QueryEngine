/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.ObservationRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Observation extends TableImpl<ObservationRecord> {

    private static final long serialVersionUID = 406529076;

    /**
     * The reference instance of <code>subscriber_pi.observation</code>
     */
    public static final Observation OBSERVATION = new Observation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ObservationRecord> getRecordType() {
        return ObservationRecord.class;
    }

    /**
     * The column <code>subscriber_pi.observation.id</code>.
     */
    public final TableField<ObservationRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.observation.organization_id</code>.
     */
    public final TableField<ObservationRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.observation.patient_id</code>.
     */
    public final TableField<ObservationRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.observation.person_id</code>.
     */
    public final TableField<ObservationRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.observation.encounter_id</code>.
     */
    public final TableField<ObservationRecord, Long> ENCOUNTER_ID = createField(DSL.name("encounter_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.observation.practitioner_id</code>.
     */
    public final TableField<ObservationRecord, Long> PRACTITIONER_ID = createField(DSL.name("practitioner_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.observation.clinical_effective_date</code>.
     */
    public final TableField<ObservationRecord, Date> CLINICAL_EFFECTIVE_DATE = createField(DSL.name("clinical_effective_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.observation.date_precision_concept_id</code>.
     */
    public final TableField<ObservationRecord, Integer> DATE_PRECISION_CONCEPT_ID = createField(DSL.name("date_precision_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.observation.result_value</code>.
     */
    public final TableField<ObservationRecord, Double> RESULT_VALUE = createField(DSL.name("result_value"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>subscriber_pi.observation.result_value_units</code>.
     */
    public final TableField<ObservationRecord, String> RESULT_VALUE_UNITS = createField(DSL.name("result_value_units"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>subscriber_pi.observation.result_date</code>.
     */
    public final TableField<ObservationRecord, Date> RESULT_DATE = createField(DSL.name("result_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.observation.result_text</code>.
     */
    public final TableField<ObservationRecord, String> RESULT_TEXT = createField(DSL.name("result_text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>subscriber_pi.observation.result_concept_id</code>.
     */
    public final TableField<ObservationRecord, Integer> RESULT_CONCEPT_ID = createField(DSL.name("result_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.observation.comparator_concept_id</code>.
     */
    public final TableField<ObservationRecord, Integer> COMPARATOR_CONCEPT_ID = createField(DSL.name("comparator_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.observation.is_problem</code>.
     */
    public final TableField<ObservationRecord, Byte> IS_PROBLEM = createField(DSL.name("is_problem"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.observation.is_review</code>.
     */
    public final TableField<ObservationRecord, Byte> IS_REVIEW = createField(DSL.name("is_review"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.observation.problem_end_date</code>.
     */
    public final TableField<ObservationRecord, Date> PROBLEM_END_DATE = createField(DSL.name("problem_end_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.observation.parent_observation_id</code>.
     */
    public final TableField<ObservationRecord, Long> PARENT_OBSERVATION_ID = createField(DSL.name("parent_observation_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.observation.core_concept_id</code>.
     */
    public final TableField<ObservationRecord, Integer> CORE_CONCEPT_ID = createField(DSL.name("core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.observation.non_core_concept_id</code>.
     */
    public final TableField<ObservationRecord, Integer> NON_CORE_CONCEPT_ID = createField(DSL.name("non_core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.observation.age_at_event</code>.
     */
    public final TableField<ObservationRecord, BigDecimal> AGE_AT_EVENT = createField(DSL.name("age_at_event"), org.jooq.impl.SQLDataType.DECIMAL(5, 2), this, "");

    /**
     * The column <code>subscriber_pi.observation.episodicity_concept_id</code>.
     */
    public final TableField<ObservationRecord, Integer> EPISODICITY_CONCEPT_ID = createField(DSL.name("episodicity_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.observation.is_primary</code>.
     */
    public final TableField<ObservationRecord, Byte> IS_PRIMARY = createField(DSL.name("is_primary"), org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>subscriber_pi.observation</code> table reference
     */
    public Observation() {
        this(DSL.name("observation"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.observation</code> table reference
     */
    public Observation(String alias) {
        this(DSL.name(alias), OBSERVATION);
    }

    /**
     * Create an aliased <code>subscriber_pi.observation</code> table reference
     */
    public Observation(Name alias) {
        this(alias, OBSERVATION);
    }

    private Observation(Name alias, Table<ObservationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Observation(Name alias, Table<ObservationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Observation(Table<O> child, ForeignKey<O, ObservationRecord> key) {
        super(child, key, OBSERVATION);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OBSERVATION_FK_OBSERVATION_ENCOUNTER_ID, Indexes.OBSERVATION_FK_OBSERVATION_PATIENT_ID_ORGANIZATION_ID, Indexes.OBSERVATION_FK_OBSERVATION_PRACTITIONER_ID, Indexes.OBSERVATION_IX_OBSERVATION_CLINICAL_EFFECTIVE_DATE, Indexes.OBSERVATION_IX_OBSERVATION_ORGANIZATION_ID, Indexes.OBSERVATION_IX_OBSERVATION_PERSON_ID, Indexes.OBSERVATION_OBSERVATION_CORE_CONCEPT_ID, Indexes.OBSERVATION_OBSERVATION_CORE_CONCEPT_ID_IS_PROBLEM, Indexes.OBSERVATION_OBSERVATION_CORE_CONCEPT_ID_RESULT_VALUE, Indexes.OBSERVATION_OBSERVATION_ID, Indexes.OBSERVATION_OBSERVATION_NON_CORE_CONCEPT_ID, Indexes.OBSERVATION_OBSERVATION_PATIENT_ID, Indexes.OBSERVATION_PRIMARY);
    }

    @Override
    public UniqueKey<ObservationRecord> getPrimaryKey() {
        return Keys.KEY_OBSERVATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<ObservationRecord>> getKeys() {
        return Arrays.<UniqueKey<ObservationRecord>>asList(Keys.KEY_OBSERVATION_PRIMARY, Keys.KEY_OBSERVATION_OBSERVATION_ID);
    }

    @Override
    public List<ForeignKey<ObservationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ObservationRecord, ?>>asList(Keys.FK_OBSERVATION_PATIENT_ID_ORGANIZATION_ID, Keys.FK_OBSERVATION_ENCOUNTER_ID, Keys.FK_OBSERVATION_PRACTITIONER_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_OBSERVATION_PATIENT_ID_ORGANIZATION_ID);
    }

    public Encounter encounter() {
        return new Encounter(this, Keys.FK_OBSERVATION_ENCOUNTER_ID);
    }

    public Practitioner practitioner() {
        return new Practitioner(this, Keys.FK_OBSERVATION_PRACTITIONER_ID);
    }

    @Override
    public Observation as(String alias) {
        return new Observation(DSL.name(alias), this);
    }

    @Override
    public Observation as(Name alias) {
        return new Observation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Observation rename(String name) {
        return new Observation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Observation rename(Name name) {
        return new Observation(name, null);
    }
}
