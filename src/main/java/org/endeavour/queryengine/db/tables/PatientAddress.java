/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.PatientAddressRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * stores address details for patients
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PatientAddress extends TableImpl<PatientAddressRecord> {

    private static final long serialVersionUID = -1042875115;

    /**
     * The reference instance of <code>subscriber_pi.patient_address</code>
     */
    public static final PatientAddress PATIENT_ADDRESS = new PatientAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientAddressRecord> getRecordType() {
        return PatientAddressRecord.class;
    }

    /**
     * The column <code>subscriber_pi.patient_address.id</code>.
     */
    public final TableField<PatientAddressRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.organization_id</code>.
     */
    public final TableField<PatientAddressRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.patient_id</code>.
     */
    public final TableField<PatientAddressRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.person_id</code>.
     */
    public final TableField<PatientAddressRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.address_line_1</code>.
     */
    public final TableField<PatientAddressRecord, String> ADDRESS_LINE_1 = createField(DSL.name("address_line_1"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.address_line_2</code>.
     */
    public final TableField<PatientAddressRecord, String> ADDRESS_LINE_2 = createField(DSL.name("address_line_2"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.address_line_3</code>.
     */
    public final TableField<PatientAddressRecord, String> ADDRESS_LINE_3 = createField(DSL.name("address_line_3"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.address_line_4</code>.
     */
    public final TableField<PatientAddressRecord, String> ADDRESS_LINE_4 = createField(DSL.name("address_line_4"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.city</code>.
     */
    public final TableField<PatientAddressRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.postcode</code>.
     */
    public final TableField<PatientAddressRecord, String> POSTCODE = createField(DSL.name("postcode"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.use_concept_id</code>. use of address (e.g. home, temporary)
     */
    public final TableField<PatientAddressRecord, Integer> USE_CONCEPT_ID = createField(DSL.name("use_concept_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "use of address (e.g. home, temporary)");

    /**
     * The column <code>subscriber_pi.patient_address.start_date</code>.
     */
    public final TableField<PatientAddressRecord, Date> START_DATE = createField(DSL.name("start_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.patient_address.end_date</code>.
     */
    public final TableField<PatientAddressRecord, Date> END_DATE = createField(DSL.name("end_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.patient_address.lsoa_2001_code</code>.
     */
    public final TableField<PatientAddressRecord, String> LSOA_2001_CODE = createField(DSL.name("lsoa_2001_code"), org.jooq.impl.SQLDataType.VARCHAR(9), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.lsoa_2011_code</code>.
     */
    public final TableField<PatientAddressRecord, String> LSOA_2011_CODE = createField(DSL.name("lsoa_2011_code"), org.jooq.impl.SQLDataType.VARCHAR(9), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.msoa_2001_code</code>.
     */
    public final TableField<PatientAddressRecord, String> MSOA_2001_CODE = createField(DSL.name("msoa_2001_code"), org.jooq.impl.SQLDataType.VARCHAR(9), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.msoa_2011_code</code>.
     */
    public final TableField<PatientAddressRecord, String> MSOA_2011_CODE = createField(DSL.name("msoa_2011_code"), org.jooq.impl.SQLDataType.VARCHAR(9), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.ward_code</code>.
     */
    public final TableField<PatientAddressRecord, String> WARD_CODE = createField(DSL.name("ward_code"), org.jooq.impl.SQLDataType.VARCHAR(9), this, "");

    /**
     * The column <code>subscriber_pi.patient_address.local_authority_code</code>.
     */
    public final TableField<PatientAddressRecord, String> LOCAL_AUTHORITY_CODE = createField(DSL.name("local_authority_code"), org.jooq.impl.SQLDataType.VARCHAR(9), this, "");

    /**
     * Create a <code>subscriber_pi.patient_address</code> table reference
     */
    public PatientAddress() {
        this(DSL.name("patient_address"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.patient_address</code> table reference
     */
    public PatientAddress(String alias) {
        this(DSL.name(alias), PATIENT_ADDRESS);
    }

    /**
     * Create an aliased <code>subscriber_pi.patient_address</code> table reference
     */
    public PatientAddress(Name alias) {
        this(alias, PATIENT_ADDRESS);
    }

    private PatientAddress(Name alias, Table<PatientAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private PatientAddress(Name alias, Table<PatientAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("stores address details for patients"));
    }

    public <O extends Record> PatientAddress(Table<O> child, ForeignKey<O, PatientAddressRecord> key) {
        super(child, key, PATIENT_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATIENT_ADDRESS_FK_PATIENT_ADDRESS_PATIENT_ID_ORGANIZATION_ID, Indexes.PATIENT_ADDRESS_PRIMARY);
    }

    @Override
    public UniqueKey<PatientAddressRecord> getPrimaryKey() {
        return Keys.KEY_PATIENT_ADDRESS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PatientAddressRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientAddressRecord>>asList(Keys.KEY_PATIENT_ADDRESS_PRIMARY);
    }

    @Override
    public List<ForeignKey<PatientAddressRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PatientAddressRecord, ?>>asList(Keys.FK_PATIENT_ADDRESS_PATIENT_ID_ORGANIZATION_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_PATIENT_ADDRESS_PATIENT_ID_ORGANIZATION_ID);
    }

    @Override
    public PatientAddress as(String alias) {
        return new PatientAddress(DSL.name(alias), this);
    }

    @Override
    public PatientAddress as(Name alias) {
        return new PatientAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientAddress rename(String name) {
        return new PatientAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientAddress rename(Name name) {
        return new PatientAddress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Long, Long, Long, String, String, String, String, String, String, Integer, Date, Date, String, String, String, String, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
