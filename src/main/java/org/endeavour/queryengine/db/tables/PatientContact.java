/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.PatientContactRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * stores contact details (e.g. phone) for patients
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PatientContact extends TableImpl<PatientContactRecord> {

    private static final long serialVersionUID = 481120953;

    /**
     * The reference instance of <code>subscriber_pi.patient_contact</code>
     */
    public static final PatientContact PATIENT_CONTACT = new PatientContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientContactRecord> getRecordType() {
        return PatientContactRecord.class;
    }

    /**
     * The column <code>subscriber_pi.patient_contact.id</code>.
     */
    public final TableField<PatientContactRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_contact.organization_id</code>.
     */
    public final TableField<PatientContactRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_contact.patient_id</code>.
     */
    public final TableField<PatientContactRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_contact.person_id</code>.
     */
    public final TableField<PatientContactRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.patient_contact.use_concept_id</code>. use of contact (e.g. mobile, home, work)
     */
    public final TableField<PatientContactRecord, Integer> USE_CONCEPT_ID = createField(DSL.name("use_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "use of contact (e.g. mobile, home, work)");

    /**
     * The column <code>subscriber_pi.patient_contact.type_concept_id</code>. type of contact (e.g. phone, email)
     */
    public final TableField<PatientContactRecord, Integer> TYPE_CONCEPT_ID = createField(DSL.name("type_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "type of contact (e.g. phone, email)");

    /**
     * The column <code>subscriber_pi.patient_contact.start_date</code>.
     */
    public final TableField<PatientContactRecord, Date> START_DATE = createField(DSL.name("start_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.patient_contact.end_date</code>.
     */
    public final TableField<PatientContactRecord, Date> END_DATE = createField(DSL.name("end_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.patient_contact.value</code>. the actual phone number or email address
     */
    public final TableField<PatientContactRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "the actual phone number or email address");

    /**
     * Create a <code>subscriber_pi.patient_contact</code> table reference
     */
    public PatientContact() {
        this(DSL.name("patient_contact"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.patient_contact</code> table reference
     */
    public PatientContact(String alias) {
        this(DSL.name(alias), PATIENT_CONTACT);
    }

    /**
     * Create an aliased <code>subscriber_pi.patient_contact</code> table reference
     */
    public PatientContact(Name alias) {
        this(alias, PATIENT_CONTACT);
    }

    private PatientContact(Name alias, Table<PatientContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private PatientContact(Name alias, Table<PatientContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("stores contact details (e.g. phone) for patients"));
    }

    public <O extends Record> PatientContact(Table<O> child, ForeignKey<O, PatientContactRecord> key) {
        super(child, key, PATIENT_CONTACT);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATIENT_CONTACT_FK_PATIENT_CONTACT_PATIENT_ID_ORGANISATION_ID, Indexes.PATIENT_CONTACT_PRIMARY);
    }

    @Override
    public UniqueKey<PatientContactRecord> getPrimaryKey() {
        return Keys.KEY_PATIENT_CONTACT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PatientContactRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientContactRecord>>asList(Keys.KEY_PATIENT_CONTACT_PRIMARY);
    }

    @Override
    public List<ForeignKey<PatientContactRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PatientContactRecord, ?>>asList(Keys.FK_PATIENT_CONTACT_PATIENT_ID_ORGANISATION_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_PATIENT_CONTACT_PATIENT_ID_ORGANISATION_ID);
    }

    @Override
    public PatientContact as(String alias) {
        return new PatientContact(DSL.name(alias), this);
    }

    @Override
    public PatientContact as(Name alias) {
        return new PatientContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientContact rename(String name) {
        return new PatientContact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PatientContact rename(Name name) {
        return new PatientContact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, Long, Integer, Integer, Date, Date, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
