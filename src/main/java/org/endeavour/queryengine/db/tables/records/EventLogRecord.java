/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.tables.EventLog;
import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventLogRecord extends TableRecordImpl<EventLogRecord> implements Record4<Timestamp, Byte, Byte, Long> {

    private static final long serialVersionUID = -730784380;

    /**
     * Setter for <code>subscriber_pi.event_log.dt_change</code>. date time the change was made to this DB
     */
    public void setDtChange(Timestamp value) {
        set(0, value);
    }

    /**
     * Getter for <code>subscriber_pi.event_log.dt_change</code>. date time the change was made to this DB
     */
    public Timestamp getDtChange() {
        return (Timestamp) get(0);
    }

    /**
     * Setter for <code>subscriber_pi.event_log.change_type</code>. type of transaction 0=insert, 1=update, 2=delete
     */
    public void setChangeType(Byte value) {
        set(1, value);
    }

    /**
     * Getter for <code>subscriber_pi.event_log.change_type</code>. type of transaction 0=insert, 1=update, 2=delete
     */
    public Byte getChangeType() {
        return (Byte) get(1);
    }

    /**
     * Setter for <code>subscriber_pi.event_log.table_id</code>. identifier of the table changed
     */
    public void setTableId(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>subscriber_pi.event_log.table_id</code>. identifier of the table changed
     */
    public Byte getTableId() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>subscriber_pi.event_log.record_id</code>. id of the record changed
     */
    public void setRecordId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>subscriber_pi.event_log.record_id</code>. id of the record changed
     */
    public Long getRecordId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Timestamp, Byte, Byte, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Timestamp, Byte, Byte, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Timestamp> field1() {
        return EventLog.EVENT_LOG.DT_CHANGE;
    }

    @Override
    public Field<Byte> field2() {
        return EventLog.EVENT_LOG.CHANGE_TYPE;
    }

    @Override
    public Field<Byte> field3() {
        return EventLog.EVENT_LOG.TABLE_ID;
    }

    @Override
    public Field<Long> field4() {
        return EventLog.EVENT_LOG.RECORD_ID;
    }

    @Override
    public Timestamp component1() {
        return getDtChange();
    }

    @Override
    public Byte component2() {
        return getChangeType();
    }

    @Override
    public Byte component3() {
        return getTableId();
    }

    @Override
    public Long component4() {
        return getRecordId();
    }

    @Override
    public Timestamp value1() {
        return getDtChange();
    }

    @Override
    public Byte value2() {
        return getChangeType();
    }

    @Override
    public Byte value3() {
        return getTableId();
    }

    @Override
    public Long value4() {
        return getRecordId();
    }

    @Override
    public EventLogRecord value1(Timestamp value) {
        setDtChange(value);
        return this;
    }

    @Override
    public EventLogRecord value2(Byte value) {
        setChangeType(value);
        return this;
    }

    @Override
    public EventLogRecord value3(Byte value) {
        setTableId(value);
        return this;
    }

    @Override
    public EventLogRecord value4(Long value) {
        setRecordId(value);
        return this;
    }

    @Override
    public EventLogRecord values(Timestamp value1, Byte value2, Byte value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventLogRecord
     */
    public EventLogRecord() {
        super(EventLog.EVENT_LOG);
    }

    /**
     * Create a detached, initialised EventLogRecord
     */
    public EventLogRecord(Timestamp dtChange, Byte changeType, Byte tableId, Long recordId) {
        super(EventLog.EVENT_LOG);

        set(0, dtChange);
        set(1, changeType);
        set(2, tableId);
        set(3, recordId);
    }
}
