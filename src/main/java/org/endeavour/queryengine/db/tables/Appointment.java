/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.AppointmentRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Appointment extends TableImpl<AppointmentRecord> {

    private static final long serialVersionUID = 1893296776;

    /**
     * The reference instance of <code>subscriber_pi.appointment</code>
     */
    public static final Appointment APPOINTMENT = new Appointment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppointmentRecord> getRecordType() {
        return AppointmentRecord.class;
    }

    /**
     * The column <code>subscriber_pi.appointment.id</code>.
     */
    public final TableField<AppointmentRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.appointment.organization_id</code>.
     */
    public final TableField<AppointmentRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.appointment.patient_id</code>.
     */
    public final TableField<AppointmentRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.appointment.person_id</code>.
     */
    public final TableField<AppointmentRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.appointment.practitioner_id</code>.
     */
    public final TableField<AppointmentRecord, Long> PRACTITIONER_ID = createField(DSL.name("practitioner_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.appointment.schedule_id</code>.
     */
    public final TableField<AppointmentRecord, Long> SCHEDULE_ID = createField(DSL.name("schedule_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.appointment.start_date</code>.
     */
    public final TableField<AppointmentRecord, Timestamp> START_DATE = createField(DSL.name("start_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>subscriber_pi.appointment.planned_duration</code>.
     */
    public final TableField<AppointmentRecord, Integer> PLANNED_DURATION = createField(DSL.name("planned_duration"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.appointment.actual_duration</code>.
     */
    public final TableField<AppointmentRecord, Integer> ACTUAL_DURATION = createField(DSL.name("actual_duration"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.appointment.appointment_status_concept_id</code>.
     */
    public final TableField<AppointmentRecord, Integer> APPOINTMENT_STATUS_CONCEPT_ID = createField(DSL.name("appointment_status_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.appointment.patient_wait</code>.
     */
    public final TableField<AppointmentRecord, Integer> PATIENT_WAIT = createField(DSL.name("patient_wait"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.appointment.patient_delay</code>.
     */
    public final TableField<AppointmentRecord, Integer> PATIENT_DELAY = createField(DSL.name("patient_delay"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.appointment.date_time_sent_in</code>.
     */
    public final TableField<AppointmentRecord, Timestamp> DATE_TIME_SENT_IN = createField(DSL.name("date_time_sent_in"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>subscriber_pi.appointment.date_time_left</code>.
     */
    public final TableField<AppointmentRecord, Timestamp> DATE_TIME_LEFT = createField(DSL.name("date_time_left"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>subscriber_pi.appointment.source_id</code>.
     */
    public final TableField<AppointmentRecord, String> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>subscriber_pi.appointment.cancelled_date</code>.
     */
    public final TableField<AppointmentRecord, Timestamp> CANCELLED_DATE = createField(DSL.name("cancelled_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>subscriber_pi.appointment</code> table reference
     */
    public Appointment() {
        this(DSL.name("appointment"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.appointment</code> table reference
     */
    public Appointment(String alias) {
        this(DSL.name(alias), APPOINTMENT);
    }

    /**
     * Create an aliased <code>subscriber_pi.appointment</code> table reference
     */
    public Appointment(Name alias) {
        this(alias, APPOINTMENT);
    }

    private Appointment(Name alias, Table<AppointmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Appointment(Name alias, Table<AppointmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Appointment(Table<O> child, ForeignKey<O, AppointmentRecord> key) {
        super(child, key, APPOINTMENT);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APPOINTMENT_APPOINTMENT_ID, Indexes.APPOINTMENT_APPOINTMENT_PATIENT_ID, Indexes.APPOINTMENT_FK_APPOINTMENT_PRACTITIONER_ID, Indexes.APPOINTMENT_PRIMARY);
    }

    @Override
    public UniqueKey<AppointmentRecord> getPrimaryKey() {
        return Keys.KEY_APPOINTMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AppointmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AppointmentRecord>>asList(Keys.KEY_APPOINTMENT_PRIMARY, Keys.KEY_APPOINTMENT_APPOINTMENT_ID);
    }

    @Override
    public List<ForeignKey<AppointmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AppointmentRecord, ?>>asList(Keys.FK_APPOINTMENT_ORGANIZATION_ID, Keys.FK_APPOINTMENT_PRACTITIONER_ID);
    }

    public Organization organization() {
        return new Organization(this, Keys.FK_APPOINTMENT_ORGANIZATION_ID);
    }

    public Practitioner practitioner() {
        return new Practitioner(this, Keys.FK_APPOINTMENT_PRACTITIONER_ID);
    }

    @Override
    public Appointment as(String alias) {
        return new Appointment(DSL.name(alias), this);
    }

    @Override
    public Appointment as(Name alias) {
        return new Appointment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointment rename(String name) {
        return new Appointment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointment rename(Name name) {
        return new Appointment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, Long, Long, Long, Long, Timestamp, Integer, Integer, Integer, Integer, Integer, Timestamp, Timestamp, String, Timestamp> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
