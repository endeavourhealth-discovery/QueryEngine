/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables.records;


import javax.annotation.Generated;

import org.endeavour.queryengine.db.tables.ConceptMap;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConceptMapRecord extends UpdatableRecordImpl<ConceptMapRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1773774518;

    /**
     * Setter for <code>subscriber_pi.concept_map.legacy</code>. Concept DBID
     */
    public void setLegacy(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>subscriber_pi.concept_map.legacy</code>. Concept DBID
     */
    public Integer getLegacy() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>subscriber_pi.concept_map.core</code>. Property value concept dbid
     */
    public void setCore(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>subscriber_pi.concept_map.core</code>. Property value concept dbid
     */
    public Integer getCore() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ConceptMap.CONCEPT_MAP.LEGACY;
    }

    @Override
    public Field<Integer> field2() {
        return ConceptMap.CONCEPT_MAP.CORE;
    }

    @Override
    public Integer component1() {
        return getLegacy();
    }

    @Override
    public Integer component2() {
        return getCore();
    }

    @Override
    public Integer value1() {
        return getLegacy();
    }

    @Override
    public Integer value2() {
        return getCore();
    }

    @Override
    public ConceptMapRecord value1(Integer value) {
        setLegacy(value);
        return this;
    }

    @Override
    public ConceptMapRecord value2(Integer value) {
        setCore(value);
        return this;
    }

    @Override
    public ConceptMapRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConceptMapRecord
     */
    public ConceptMapRecord() {
        super(ConceptMap.CONCEPT_MAP);
    }

    /**
     * Create a detached, initialised ConceptMapRecord
     */
    public ConceptMapRecord(Integer legacy, Integer core) {
        super(ConceptMap.CONCEPT_MAP);

        set(0, legacy);
        set(1, core);
    }
}
