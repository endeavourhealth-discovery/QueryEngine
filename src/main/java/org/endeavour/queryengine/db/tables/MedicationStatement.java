/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.MedicationStatementRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicationStatement extends TableImpl<MedicationStatementRecord> {

    private static final long serialVersionUID = 1248281398;

    /**
     * The reference instance of <code>subscriber_pi.medication_statement</code>
     */
    public static final MedicationStatement MEDICATION_STATEMENT = new MedicationStatement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicationStatementRecord> getRecordType() {
        return MedicationStatementRecord.class;
    }

    /**
     * The column <code>subscriber_pi.medication_statement.id</code>.
     */
    public final TableField<MedicationStatementRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.organization_id</code>.
     */
    public final TableField<MedicationStatementRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.patient_id</code>.
     */
    public final TableField<MedicationStatementRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.person_id</code>.
     */
    public final TableField<MedicationStatementRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.encounter_id</code>.
     */
    public final TableField<MedicationStatementRecord, Long> ENCOUNTER_ID = createField(DSL.name("encounter_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.practitioner_id</code>.
     */
    public final TableField<MedicationStatementRecord, Long> PRACTITIONER_ID = createField(DSL.name("practitioner_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.clinical_effective_date</code>.
     */
    public final TableField<MedicationStatementRecord, Date> CLINICAL_EFFECTIVE_DATE = createField(DSL.name("clinical_effective_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.date_precision_concept_id</code>.
     */
    public final TableField<MedicationStatementRecord, Integer> DATE_PRECISION_CONCEPT_ID = createField(DSL.name("date_precision_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.is_active</code>.
     */
    public final TableField<MedicationStatementRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.cancellation_date</code>.
     */
    public final TableField<MedicationStatementRecord, Date> CANCELLATION_DATE = createField(DSL.name("cancellation_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.dose</code>.
     */
    public final TableField<MedicationStatementRecord, String> DOSE = createField(DSL.name("dose"), org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.quantity_value</code>.
     */
    public final TableField<MedicationStatementRecord, Double> QUANTITY_VALUE = createField(DSL.name("quantity_value"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.quantity_unit</code>.
     */
    public final TableField<MedicationStatementRecord, String> QUANTITY_UNIT = createField(DSL.name("quantity_unit"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.authorisation_type_concept_id</code>.
     */
    public final TableField<MedicationStatementRecord, Integer> AUTHORISATION_TYPE_CONCEPT_ID = createField(DSL.name("authorisation_type_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.core_concept_id</code>.
     */
    public final TableField<MedicationStatementRecord, Integer> CORE_CONCEPT_ID = createField(DSL.name("core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.non_core_concept_id</code>.
     */
    public final TableField<MedicationStatementRecord, Integer> NON_CORE_CONCEPT_ID = createField(DSL.name("non_core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.bnf_reference</code>.
     */
    public final TableField<MedicationStatementRecord, String> BNF_REFERENCE = createField(DSL.name("bnf_reference"), org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.age_at_event</code>.
     */
    public final TableField<MedicationStatementRecord, BigDecimal> AGE_AT_EVENT = createField(DSL.name("age_at_event"), org.jooq.impl.SQLDataType.DECIMAL(5, 2), this, "");

    /**
     * The column <code>subscriber_pi.medication_statement.issue_method</code>.
     */
    public final TableField<MedicationStatementRecord, String> ISSUE_METHOD = createField(DSL.name("issue_method"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>subscriber_pi.medication_statement</code> table reference
     */
    public MedicationStatement() {
        this(DSL.name("medication_statement"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.medication_statement</code> table reference
     */
    public MedicationStatement(String alias) {
        this(DSL.name(alias), MEDICATION_STATEMENT);
    }

    /**
     * Create an aliased <code>subscriber_pi.medication_statement</code> table reference
     */
    public MedicationStatement(Name alias) {
        this(alias, MEDICATION_STATEMENT);
    }

    private MedicationStatement(Name alias, Table<MedicationStatementRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedicationStatement(Name alias, Table<MedicationStatementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MedicationStatement(Table<O> child, ForeignKey<O, MedicationStatementRecord> key) {
        super(child, key, MEDICATION_STATEMENT);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEDICATION_STATEMENT_FK_MEDICATION_STATEMENT_ENCOUNTER_ID, Indexes.MEDICATION_STATEMENT_FK_MEDICATION_STATEMENT_PATIENT_ID_ORGANIZATION_ID, Indexes.MEDICATION_STATEMENT_FK_MEDICATION_STATEMENT_PRACTITIONER_ID, Indexes.MEDICATION_STATEMENT_MEDICATION_STATEMENT_DMD_ID, Indexes.MEDICATION_STATEMENT_MEDICATION_STATEMENT_ID, Indexes.MEDICATION_STATEMENT_MEDICATION_STATEMENT_PATIENT_ID, Indexes.MEDICATION_STATEMENT_PRIMARY);
    }

    @Override
    public UniqueKey<MedicationStatementRecord> getPrimaryKey() {
        return Keys.KEY_MEDICATION_STATEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<MedicationStatementRecord>> getKeys() {
        return Arrays.<UniqueKey<MedicationStatementRecord>>asList(Keys.KEY_MEDICATION_STATEMENT_PRIMARY, Keys.KEY_MEDICATION_STATEMENT_MEDICATION_STATEMENT_ID);
    }

    @Override
    public List<ForeignKey<MedicationStatementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MedicationStatementRecord, ?>>asList(Keys.FK_MEDICATION_STATEMENT_PATIENT_ID_ORGANIZATION_ID, Keys.FK_MEDICATION_STATEMENT_ENCOUNTER_ID, Keys.FK_MEDICATION_STATEMENT_PRACTITIONER_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_MEDICATION_STATEMENT_PATIENT_ID_ORGANIZATION_ID);
    }

    public Encounter encounter() {
        return new Encounter(this, Keys.FK_MEDICATION_STATEMENT_ENCOUNTER_ID);
    }

    public Practitioner practitioner() {
        return new Practitioner(this, Keys.FK_MEDICATION_STATEMENT_PRACTITIONER_ID);
    }

    @Override
    public MedicationStatement as(String alias) {
        return new MedicationStatement(DSL.name(alias), this);
    }

    @Override
    public MedicationStatement as(Name alias) {
        return new MedicationStatement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicationStatement rename(String name) {
        return new MedicationStatement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicationStatement rename(Name name) {
        return new MedicationStatement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, Long, Long, Long, Long, Long, Date, Integer, Byte, Date, String, Double, String, Integer, Integer, Integer, String, BigDecimal, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
