/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.AllergyIntoleranceRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllergyIntolerance extends TableImpl<AllergyIntoleranceRecord> {

    private static final long serialVersionUID = -1750783872;

    /**
     * The reference instance of <code>subscriber_pi.allergy_intolerance</code>
     */
    public static final AllergyIntolerance ALLERGY_INTOLERANCE = new AllergyIntolerance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllergyIntoleranceRecord> getRecordType() {
        return AllergyIntoleranceRecord.class;
    }

    /**
     * The column <code>subscriber_pi.allergy_intolerance.id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.organization_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.patient_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.person_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.encounter_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Long> ENCOUNTER_ID = createField(DSL.name("encounter_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.practitioner_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Long> PRACTITIONER_ID = createField(DSL.name("practitioner_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.clinical_effective_date</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Date> CLINICAL_EFFECTIVE_DATE = createField(DSL.name("clinical_effective_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.date_precision_concept_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Integer> DATE_PRECISION_CONCEPT_ID = createField(DSL.name("date_precision_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.is_review</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Byte> IS_REVIEW = createField(DSL.name("is_review"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.core_concept_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Integer> CORE_CONCEPT_ID = createField(DSL.name("core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.non_core_concept_id</code>.
     */
    public final TableField<AllergyIntoleranceRecord, Integer> NON_CORE_CONCEPT_ID = createField(DSL.name("non_core_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.allergy_intolerance.age_at_event</code>.
     */
    public final TableField<AllergyIntoleranceRecord, BigDecimal> AGE_AT_EVENT = createField(DSL.name("age_at_event"), org.jooq.impl.SQLDataType.DECIMAL(5, 2), this, "");

    /**
     * Create a <code>subscriber_pi.allergy_intolerance</code> table reference
     */
    public AllergyIntolerance() {
        this(DSL.name("allergy_intolerance"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.allergy_intolerance</code> table reference
     */
    public AllergyIntolerance(String alias) {
        this(DSL.name(alias), ALLERGY_INTOLERANCE);
    }

    /**
     * Create an aliased <code>subscriber_pi.allergy_intolerance</code> table reference
     */
    public AllergyIntolerance(Name alias) {
        this(alias, ALLERGY_INTOLERANCE);
    }

    private AllergyIntolerance(Name alias, Table<AllergyIntoleranceRecord> aliased) {
        this(alias, aliased, null);
    }

    private AllergyIntolerance(Name alias, Table<AllergyIntoleranceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AllergyIntolerance(Table<O> child, ForeignKey<O, AllergyIntoleranceRecord> key) {
        super(child, key, ALLERGY_INTOLERANCE);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ALLERGY_INTOLERANCE_ALLERGY_INTOLERANCE_CORE_CONCEPT_ID, Indexes.ALLERGY_INTOLERANCE_ALLERGY_INTOLERANCE_ID, Indexes.ALLERGY_INTOLERANCE_ALLERGY_INTOLERANCE_PATIENT_ID, Indexes.ALLERGY_INTOLERANCE_FK_ALLERGY_INTOLERANCE_ENCOUNTER_ID, Indexes.ALLERGY_INTOLERANCE_FK_ALLERGY_INTOLERANCE_PATIENT_ID_ORGANIZATION_ID, Indexes.ALLERGY_INTOLERANCE_FK_ALLERGY_INTOLERANCE_PRACTITIONER_ID, Indexes.ALLERGY_INTOLERANCE_PRIMARY);
    }

    @Override
    public UniqueKey<AllergyIntoleranceRecord> getPrimaryKey() {
        return Keys.KEY_ALLERGY_INTOLERANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AllergyIntoleranceRecord>> getKeys() {
        return Arrays.<UniqueKey<AllergyIntoleranceRecord>>asList(Keys.KEY_ALLERGY_INTOLERANCE_PRIMARY, Keys.KEY_ALLERGY_INTOLERANCE_ALLERGY_INTOLERANCE_ID);
    }

    @Override
    public List<ForeignKey<AllergyIntoleranceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AllergyIntoleranceRecord, ?>>asList(Keys.FK_ALLERGY_INTOLERANCE_PATIENT_ID_ORGANIZATION_ID, Keys.FK_ALLERGY_INTOLERANCE_ENCOUNTER_ID, Keys.FK_ALLERGY_INTOLERANCE_PRACTITIONER_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_ALLERGY_INTOLERANCE_PATIENT_ID_ORGANIZATION_ID);
    }

    public Encounter encounter() {
        return new Encounter(this, Keys.FK_ALLERGY_INTOLERANCE_ENCOUNTER_ID);
    }

    public Practitioner practitioner() {
        return new Practitioner(this, Keys.FK_ALLERGY_INTOLERANCE_PRACTITIONER_ID);
    }

    @Override
    public AllergyIntolerance as(String alias) {
        return new AllergyIntolerance(DSL.name(alias), this);
    }

    @Override
    public AllergyIntolerance as(Name alias) {
        return new AllergyIntolerance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AllergyIntolerance rename(String name) {
        return new AllergyIntolerance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AllergyIntolerance rename(Name name) {
        return new AllergyIntolerance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, Long, Long, Long, Long, Date, Integer, Byte, Integer, Integer, BigDecimal> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
