/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.FlagRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flag extends TableImpl<FlagRecord> {

    private static final long serialVersionUID = 1565155769;

    /**
     * The reference instance of <code>subscriber_pi.flag</code>
     */
    public static final Flag FLAG = new Flag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlagRecord> getRecordType() {
        return FlagRecord.class;
    }

    /**
     * The column <code>subscriber_pi.flag.id</code>.
     */
    public final TableField<FlagRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.flag.organization_id</code>.
     */
    public final TableField<FlagRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.flag.patient_id</code>.
     */
    public final TableField<FlagRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.flag.person_id</code>.
     */
    public final TableField<FlagRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.flag.effective_date</code>.
     */
    public final TableField<FlagRecord, Date> EFFECTIVE_DATE = createField(DSL.name("effective_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.flag.date_precision_concept_id</code>.
     */
    public final TableField<FlagRecord, Integer> DATE_PRECISION_CONCEPT_ID = createField(DSL.name("date_precision_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.flag.is_active</code>.
     */
    public final TableField<FlagRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.flag.flag_text</code>.
     */
    public final TableField<FlagRecord, String> FLAG_TEXT = createField(DSL.name("flag_text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>subscriber_pi.flag</code> table reference
     */
    public Flag() {
        this(DSL.name("flag"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.flag</code> table reference
     */
    public Flag(String alias) {
        this(DSL.name(alias), FLAG);
    }

    /**
     * Create an aliased <code>subscriber_pi.flag</code> table reference
     */
    public Flag(Name alias) {
        this(alias, FLAG);
    }

    private Flag(Name alias, Table<FlagRecord> aliased) {
        this(alias, aliased, null);
    }

    private Flag(Name alias, Table<FlagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Flag(Table<O> child, ForeignKey<O, FlagRecord> key) {
        super(child, key, FLAG);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FLAG_FK_FLAG_PATIENT_ID_ORGANIZATION_ID, Indexes.FLAG_FLAG_ID, Indexes.FLAG_FLAG_PATIENT_ID, Indexes.FLAG_PRIMARY);
    }

    @Override
    public UniqueKey<FlagRecord> getPrimaryKey() {
        return Keys.KEY_FLAG_PRIMARY;
    }

    @Override
    public List<UniqueKey<FlagRecord>> getKeys() {
        return Arrays.<UniqueKey<FlagRecord>>asList(Keys.KEY_FLAG_PRIMARY, Keys.KEY_FLAG_FLAG_ID);
    }

    @Override
    public List<ForeignKey<FlagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FlagRecord, ?>>asList(Keys.FK_FLAG_PATIENT_ID_ORGANIZATION_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_FLAG_PATIENT_ID_ORGANIZATION_ID);
    }

    @Override
    public Flag as(String alias) {
        return new Flag(DSL.name(alias), this);
    }

    @Override
    public Flag as(Name alias) {
        return new Flag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Flag rename(String name) {
        return new Flag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flag rename(Name name) {
        return new Flag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, Long, Date, Integer, Byte, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
