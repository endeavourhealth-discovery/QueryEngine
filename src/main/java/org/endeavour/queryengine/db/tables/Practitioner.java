/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.PractitionerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Practitioner extends TableImpl<PractitionerRecord> {

    private static final long serialVersionUID = 790336924;

    /**
     * The reference instance of <code>subscriber_pi.practitioner</code>
     */
    public static final Practitioner PRACTITIONER = new Practitioner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PractitionerRecord> getRecordType() {
        return PractitionerRecord.class;
    }

    /**
     * The column <code>subscriber_pi.practitioner.id</code>.
     */
    public final TableField<PractitionerRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.practitioner.organization_id</code>.
     */
    public final TableField<PractitionerRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.practitioner.name</code>.
     */
    public final TableField<PractitionerRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>subscriber_pi.practitioner.role_code</code>.
     */
    public final TableField<PractitionerRecord, String> ROLE_CODE = createField(DSL.name("role_code"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>subscriber_pi.practitioner.role_desc</code>.
     */
    public final TableField<PractitionerRecord, String> ROLE_DESC = createField(DSL.name("role_desc"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>subscriber_pi.practitioner</code> table reference
     */
    public Practitioner() {
        this(DSL.name("practitioner"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.practitioner</code> table reference
     */
    public Practitioner(String alias) {
        this(DSL.name(alias), PRACTITIONER);
    }

    /**
     * Create an aliased <code>subscriber_pi.practitioner</code> table reference
     */
    public Practitioner(Name alias) {
        this(alias, PRACTITIONER);
    }

    private Practitioner(Name alias, Table<PractitionerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Practitioner(Name alias, Table<PractitionerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Practitioner(Table<O> child, ForeignKey<O, PractitionerRecord> key) {
        super(child, key, PRACTITIONER);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRACTITIONER_FK_PRACTITIONER_ORGANISATION_ID, Indexes.PRACTITIONER_PRACTITIONER_ID, Indexes.PRACTITIONER_PRIMARY);
    }

    @Override
    public UniqueKey<PractitionerRecord> getPrimaryKey() {
        return Keys.KEY_PRACTITIONER_PRIMARY;
    }

    @Override
    public List<UniqueKey<PractitionerRecord>> getKeys() {
        return Arrays.<UniqueKey<PractitionerRecord>>asList(Keys.KEY_PRACTITIONER_PRIMARY, Keys.KEY_PRACTITIONER_PRACTITIONER_ID);
    }

    @Override
    public List<ForeignKey<PractitionerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PractitionerRecord, ?>>asList(Keys.FK_PRACTITIONER_ORGANISATION_ID);
    }

    public Organization organization() {
        return new Organization(this, Keys.FK_PRACTITIONER_ORGANISATION_ID);
    }

    @Override
    public Practitioner as(String alias) {
        return new Practitioner(DSL.name(alias), this);
    }

    @Override
    public Practitioner as(Name alias) {
        return new Practitioner(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Practitioner rename(String name) {
        return new Practitioner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Practitioner rename(Name name) {
        return new Practitioner(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
