/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.EpisodeOfCareRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EpisodeOfCare extends TableImpl<EpisodeOfCareRecord> {

    private static final long serialVersionUID = -915583654;

    /**
     * The reference instance of <code>subscriber_pi.episode_of_care</code>
     */
    public static final EpisodeOfCare EPISODE_OF_CARE = new EpisodeOfCare();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpisodeOfCareRecord> getRecordType() {
        return EpisodeOfCareRecord.class;
    }

    /**
     * The column <code>subscriber_pi.episode_of_care.id</code>.
     */
    public final TableField<EpisodeOfCareRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.organization_id</code>.
     */
    public final TableField<EpisodeOfCareRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.patient_id</code>.
     */
    public final TableField<EpisodeOfCareRecord, Long> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.person_id</code>.
     */
    public final TableField<EpisodeOfCareRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.registration_type_concept_id</code>.
     */
    public final TableField<EpisodeOfCareRecord, Integer> REGISTRATION_TYPE_CONCEPT_ID = createField(DSL.name("registration_type_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.registration_status_concept_id</code>.
     */
    public final TableField<EpisodeOfCareRecord, Integer> REGISTRATION_STATUS_CONCEPT_ID = createField(DSL.name("registration_status_concept_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.date_registered</code>.
     */
    public final TableField<EpisodeOfCareRecord, Date> DATE_REGISTERED = createField(DSL.name("date_registered"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.date_registered_end</code>.
     */
    public final TableField<EpisodeOfCareRecord, Date> DATE_REGISTERED_END = createField(DSL.name("date_registered_end"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>subscriber_pi.episode_of_care.usual_gp_practitioner_id</code>.
     */
    public final TableField<EpisodeOfCareRecord, Long> USUAL_GP_PRACTITIONER_ID = createField(DSL.name("usual_gp_practitioner_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>subscriber_pi.episode_of_care</code> table reference
     */
    public EpisodeOfCare() {
        this(DSL.name("episode_of_care"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.episode_of_care</code> table reference
     */
    public EpisodeOfCare(String alias) {
        this(DSL.name(alias), EPISODE_OF_CARE);
    }

    /**
     * Create an aliased <code>subscriber_pi.episode_of_care</code> table reference
     */
    public EpisodeOfCare(Name alias) {
        this(alias, EPISODE_OF_CARE);
    }

    private EpisodeOfCare(Name alias, Table<EpisodeOfCareRecord> aliased) {
        this(alias, aliased, null);
    }

    private EpisodeOfCare(Name alias, Table<EpisodeOfCareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EpisodeOfCare(Table<O> child, ForeignKey<O, EpisodeOfCareRecord> key) {
        super(child, key, EPISODE_OF_CARE);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EPISODE_OF_CARE_EPISODE_OF_CARE_DATE_REGISTERED, Indexes.EPISODE_OF_CARE_EPISODE_OF_CARE_DATE_REGISTERED_END, Indexes.EPISODE_OF_CARE_EPISODE_OF_CARE_ID, Indexes.EPISODE_OF_CARE_EPISODE_OF_CARE_ORGANIZATION_ID, Indexes.EPISODE_OF_CARE_EPISODE_OF_CARE_PATIENT_ID, Indexes.EPISODE_OF_CARE_EPISODE_OF_CARE_PERSON_ID, Indexes.EPISODE_OF_CARE_EPISODE_OF_CARE_REGISTRATION_TYPE_CONCEPT_ID, Indexes.EPISODE_OF_CARE_FK_EPISODE_OF_CARE_PATIENT_ID_ORGANISATION_ID, Indexes.EPISODE_OF_CARE_FK_EPISODE_OF_CARE_PRACTITIONER_ID, Indexes.EPISODE_OF_CARE_PRIMARY);
    }

    @Override
    public UniqueKey<EpisodeOfCareRecord> getPrimaryKey() {
        return Keys.KEY_EPISODE_OF_CARE_PRIMARY;
    }

    @Override
    public List<UniqueKey<EpisodeOfCareRecord>> getKeys() {
        return Arrays.<UniqueKey<EpisodeOfCareRecord>>asList(Keys.KEY_EPISODE_OF_CARE_PRIMARY, Keys.KEY_EPISODE_OF_CARE_EPISODE_OF_CARE_ID);
    }

    @Override
    public List<ForeignKey<EpisodeOfCareRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EpisodeOfCareRecord, ?>>asList(Keys.FK_EPISODE_OF_CARE_PATIENT_ID_ORGANISATION_ID, Keys.FK_EPISODE_OF_CARE_PRACTITIONER_ID);
    }

    public Patient patient() {
        return new Patient(this, Keys.FK_EPISODE_OF_CARE_PATIENT_ID_ORGANISATION_ID);
    }

    public Practitioner practitioner() {
        return new Practitioner(this, Keys.FK_EPISODE_OF_CARE_PRACTITIONER_ID);
    }

    @Override
    public EpisodeOfCare as(String alias) {
        return new EpisodeOfCare(DSL.name(alias), this);
    }

    @Override
    public EpisodeOfCare as(Name alias) {
        return new EpisodeOfCare(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EpisodeOfCare rename(String name) {
        return new EpisodeOfCare(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpisodeOfCare rename(Name name) {
        return new EpisodeOfCare(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, Long, Integer, Integer, Date, Date, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
