/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.Indexes;
import org.endeavour.queryengine.db.Keys;
import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.PseudoIdRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PseudoId extends TableImpl<PseudoIdRecord> {

    private static final long serialVersionUID = 1261463628;

    /**
     * The reference instance of <code>subscriber_pi.pseudo_id</code>
     */
    public static final PseudoId PSEUDO_ID = new PseudoId();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PseudoIdRecord> getRecordType() {
        return PseudoIdRecord.class;
    }

    /**
     * The column <code>subscriber_pi.pseudo_id.id</code>.
     */
    public final TableField<PseudoIdRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.pseudo_id.patient_id</code>.
     */
    public final TableField<PseudoIdRecord, String> PATIENT_ID = createField(DSL.name("patient_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.pseudo_id.salt_key_name</code>.
     */
    public final TableField<PseudoIdRecord, String> SALT_KEY_NAME = createField(DSL.name("salt_key_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.pseudo_id.pseudo_id</code>.
     */
    public final TableField<PseudoIdRecord, String> PSEUDO_ID_ = createField(DSL.name("pseudo_id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>subscriber_pi.pseudo_id</code> table reference
     */
    public PseudoId() {
        this(DSL.name("pseudo_id"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.pseudo_id</code> table reference
     */
    public PseudoId(String alias) {
        this(DSL.name(alias), PSEUDO_ID);
    }

    /**
     * Create an aliased <code>subscriber_pi.pseudo_id</code> table reference
     */
    public PseudoId(Name alias) {
        this(alias, PSEUDO_ID);
    }

    private PseudoId(Name alias, Table<PseudoIdRecord> aliased) {
        this(alias, aliased, null);
    }

    private PseudoId(Name alias, Table<PseudoIdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PseudoId(Table<O> child, ForeignKey<O, PseudoIdRecord> key) {
        super(child, key, PSEUDO_ID);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PSEUDO_ID_PRIMARY, Indexes.PSEUDO_ID_PSEUDO_ID_ID, Indexes.PSEUDO_ID_PSEUDO_ID_PSEUDO_ID);
    }

    @Override
    public UniqueKey<PseudoIdRecord> getPrimaryKey() {
        return Keys.KEY_PSEUDO_ID_PRIMARY;
    }

    @Override
    public List<UniqueKey<PseudoIdRecord>> getKeys() {
        return Arrays.<UniqueKey<PseudoIdRecord>>asList(Keys.KEY_PSEUDO_ID_PSEUDO_ID_ID, Keys.KEY_PSEUDO_ID_PRIMARY);
    }

    @Override
    public PseudoId as(String alias) {
        return new PseudoId(DSL.name(alias), this);
    }

    @Override
    public PseudoId as(Name alias) {
        return new PseudoId(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PseudoId rename(String name) {
        return new PseudoId(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PseudoId rename(Name name) {
        return new PseudoId(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
