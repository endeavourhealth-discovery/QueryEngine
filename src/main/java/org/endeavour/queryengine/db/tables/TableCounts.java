/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import javax.annotation.Generated;

import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.TableCountsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableCounts extends TableImpl<TableCountsRecord> {

    private static final long serialVersionUID = 2054355669;

    /**
     * The reference instance of <code>subscriber_pi.table_counts</code>
     */
    public static final TableCounts TABLE_COUNTS = new TableCounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableCountsRecord> getRecordType() {
        return TableCountsRecord.class;
    }

    /**
     * The column <code>subscriber_pi.table_counts.sub_table_name</code>.
     */
    public final TableField<TableCountsRecord, String> SUB_TABLE_NAME = createField(DSL.name("sub_table_name"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>subscriber_pi.table_counts.original_count</code>.
     */
    public final TableField<TableCountsRecord, Long> ORIGINAL_COUNT = createField(DSL.name("original_count"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>subscriber_pi.table_counts.new_count</code>.
     */
    public final TableField<TableCountsRecord, Long> NEW_COUNT = createField(DSL.name("new_count"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>subscriber_pi.table_counts</code> table reference
     */
    public TableCounts() {
        this(DSL.name("table_counts"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.table_counts</code> table reference
     */
    public TableCounts(String alias) {
        this(DSL.name(alias), TABLE_COUNTS);
    }

    /**
     * Create an aliased <code>subscriber_pi.table_counts</code> table reference
     */
    public TableCounts(Name alias) {
        this(alias, TABLE_COUNTS);
    }

    private TableCounts(Name alias, Table<TableCountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TableCounts(Name alias, Table<TableCountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TableCounts(Table<O> child, ForeignKey<O, TableCountsRecord> key) {
        super(child, key, TABLE_COUNTS);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public TableCounts as(String alias) {
        return new TableCounts(DSL.name(alias), this);
    }

    @Override
    public TableCounts as(Name alias) {
        return new TableCounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableCounts rename(String name) {
        return new TableCounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableCounts rename(Name name) {
        return new TableCounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
