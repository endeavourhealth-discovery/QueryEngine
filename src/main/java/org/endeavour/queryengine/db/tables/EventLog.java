/*
 * This file is generated by jOOQ.
 */
package org.endeavour.queryengine.db.tables;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.endeavour.queryengine.db.SubscriberPi;
import org.endeavour.queryengine.db.tables.records.EventLogRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventLog extends TableImpl<EventLogRecord> {

    private static final long serialVersionUID = 497610172;

    /**
     * The reference instance of <code>subscriber_pi.event_log</code>
     */
    public static final EventLog EVENT_LOG = new EventLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventLogRecord> getRecordType() {
        return EventLogRecord.class;
    }

    /**
     * The column <code>subscriber_pi.event_log.dt_change</code>. date time the change was made to this DB
     */
    public final TableField<EventLogRecord, Timestamp> DT_CHANGE = createField(DSL.name("dt_change"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "date time the change was made to this DB");

    /**
     * The column <code>subscriber_pi.event_log.change_type</code>. type of transaction 0=insert, 1=update, 2=delete
     */
    public final TableField<EventLogRecord, Byte> CHANGE_TYPE = createField(DSL.name("change_type"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "type of transaction 0=insert, 1=update, 2=delete");

    /**
     * The column <code>subscriber_pi.event_log.table_id</code>. identifier of the table changed
     */
    public final TableField<EventLogRecord, Byte> TABLE_ID = createField(DSL.name("table_id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "identifier of the table changed");

    /**
     * The column <code>subscriber_pi.event_log.record_id</code>. id of the record changed
     */
    public final TableField<EventLogRecord, Long> RECORD_ID = createField(DSL.name("record_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "id of the record changed");

    /**
     * Create a <code>subscriber_pi.event_log</code> table reference
     */
    public EventLog() {
        this(DSL.name("event_log"), null);
    }

    /**
     * Create an aliased <code>subscriber_pi.event_log</code> table reference
     */
    public EventLog(String alias) {
        this(DSL.name(alias), EVENT_LOG);
    }

    /**
     * Create an aliased <code>subscriber_pi.event_log</code> table reference
     */
    public EventLog(Name alias) {
        this(alias, EVENT_LOG);
    }

    private EventLog(Name alias, Table<EventLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventLog(Name alias, Table<EventLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EventLog(Table<O> child, ForeignKey<O, EventLogRecord> key) {
        super(child, key, EVENT_LOG);
    }

    @Override
    public Schema getSchema() {
        return SubscriberPi.SUBSCRIBER_PI;
    }

    @Override
    public EventLog as(String alias) {
        return new EventLog(DSL.name(alias), this);
    }

    @Override
    public EventLog as(Name alias) {
        return new EventLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(String name) {
        return new EventLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(Name name) {
        return new EventLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Timestamp, Byte, Byte, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
